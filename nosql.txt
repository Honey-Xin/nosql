# 操作题

# 1.复制集（一主两从一制裁）

（1）创建data文件夹

（2）在data中创建db  logs  replication

（3）在replication中创建目录 primary  secondary1  secondary2  arbitration

（4）和data同一层创建conf 和logs(文件位置不重要，自己记住就可以，后边在配置文件中不要写错)

（5）在logs中创建replication_logs

（6）在replications中使用 touch 创建primary.log secondary1.log secondary2.log arbiter.log（4个)

（7）在data中闯将进程描述文件目录mkdir -p pids/replication_pid

（8）对配置文件进行编辑,总共要改4个（重要，一定记得自己各个文件创建的位置，不要写错，写错会导致后面启动失败）

![image-20220620095859478](C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20220620095859478.png)

（9）启动

./mongod -f  primary.conf (根据自己的位置来启动，总共有四个)

ps -ef|grep mongod  查看启动情况

（10）连接一个服务并且做初始化

./mongo -port 27117

![image-20220620100343722](C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20220620100343722.png)

单词别输错了

（11）分别进入两个从节点，开启主从同步

rs.secondaryOk(true)  

测试是否开启，show dbs

（12）测试

在主节点上 

use test_db

db.col.insert({"name":"fengyue","age":21})

切换到从节点：

use test_db

db.find()

可以查看到在主节点上插入的数据则说明搭建成功。

rs.isMaster()可以查看当前连接的服务器是主节点还是从节点。

（13）主从切换

将主节点shutdown   ./mongod --shutdown --dbpath /usr.../primary

此时的主节点变成了port27118的地址（自动切换）

重启端口号为27117的节点后又恢复了   ./mongod -f /usr/...secondary1.conf



# 2.消息队列（一对多）

打开三个以上的服务器端，一个用来publish  剩下的几个subscribe即可

![image-20220620101330594](C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20220620101330594.png)



# 3.mongodb基本增删改查

(1)创建数据库实例，创建集合

![image-20220619150537024](C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20220619150537024.png)



（2）插入文档

插入一条：

![image-20220619151007755](C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20220619151007755.png)

多条：

![image-20220619151032105](C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20220619151032105.png)

（3）查（指定某个字段，不要_id）

![image-20220619151807693](C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20220619151807693.png)

![image-20220619151946214](C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20220619151946214.png)

（4）给定文档新增字段

![image-20220619152137363](C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20220619152137363.png)

（5）删除（多个列中相同的，删除其中一条）

![image-20220619152435818](C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20220619152435818.png)



有多个一样的时候只删除一条。db.collections.**deleteOne**({“age”:20})  应该是这句  

 

# 4.redis集群搭建（一主两从，无哨兵）改配置文件，做测试，主机宕机、重启

（1）创建master-slave文件夹

（2）redis_6379.conf

​			内容为：pid /var/run/redis_6379.pid

​				port 6379

​				dbfilename dump6379.rdb

​				bind 0.0.0.0

​				daemonize no

​				protected-mode no  //防止开始安全模式，把这两句加上  

​		(或者进入每个port，先关闭守护进程功能 config set daemonize "no",再关闭redis保护模式 config set protected-mode "no")

(3) 启动  (三个都需要启动，查看是否启动的命令（ps aux | grep redis)

​		第一步：先分别启动配置文件的每个server   ./redis-server redis6379.conf  

​        第二步：启动客户端   ./redis-cli -h 192.168.218.136 -p 6379

(4) 查看当前主机运行的情况

​	info replication

(5) 分别在两个从机上执行主机的ip和端口号port（绑定）SLAVEOF 192.168.218.136 6379   两个都绑定好后再使用info replication就可以得到主从信息

(6) 测试

​			在从机上set key value，key * （插入数据并查看）

​			到从机上去 输入key*查看是否成功

(7) 从机宕机后不会自动加入到集群，需要重新Slaveof绑定，主机会把所有数据复制到重启的从机中。

(8) 主机宕机后，从机还是从机不会上位。可以使用slave no one使得从机成为主机



# 简答题：

# 1、redis基本操作（ppt操作一遍）

redis-cli --raw 客户端 避免乱码

（1）创建

SET key value

(2)删除

DEL key



# 2、mongodb创建索引是否对每个都可以创建。是不是越多越好

不是。

（1）数据量比较少的无需建索引，避免增大开销。

（2）不常用的数据也可以不用建索引，索引是资源密集型的，会消耗RAM和磁盘。在更新字段时，必须维护关联的索引，这回带来额外的CPU和磁盘I/O开销。

（3）当有大量写操作而读操作比较少的时候，且对读操作性能不需要考虑的时候，就不适合建立索引。

（4）数据变更需要维护索引，意味着索引越多维护成本越高。对表中的数据进行增加、删除时，索引也需要动态维护，降低了数据维护的速度。

# 3、mongodb集群，有几种？目的？

MongoDB 有三种集群部署模式，分别为主从复制（Master-Slaver）、副本集（Replica Set）和分片（Sharding）模式。

- Master-Slaver 是一种主从副本的模式，目前已经不推荐使用。
- Replica Set 模式取代了 Master-Slaver 模式，是一种互为主从的关系。Replica Set 将数据复制多份保存，不同服务器保存同一份数据，在出现故障时自动切换，实现故障转移，在实际生产中非常实用。
- Sharding 模式适合处理大量数据，它将数据分开存储，不同服务器保存不同的数据，所有服务器数据的总和即为整个数据集。

# 4、redis基本操作

（1) SET KEY VALUE

（2）DEL KEY

（3）EXISTS KEY_NAME

（4）TTL KEY_NAME  以秒为单位返回KEY 的剩余过期时间 （EXPIRE KEY 10086  TTL KEY_NAME)

# 5、mongodb基本操作

show dbs

use dbs

db.drop()



# 6、复合索引

# 7、关系型、mongodb、redis三种数据库对比

![image-20220619153956558](C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20220619153956558.png)

# 8、mongodb索引操作（唯一、复合、第一位、第二位、后台创建）

（未实践）

一维创建：db.col_index.create({"name":1})

后台创建：db.col_index.createIndex({"name":1},{background:true})

不重复：db.col_index.createIndex("age":1,{unique:true})

复合索引：针对多个字段联合创建索引，先对第一个字段排序，第一个字段相同的再对第二个字段排序，以此类推。

![image-20220620170157563](C:\Users\FY\AppData\Roaming\Typora\typora-user-images\image-20220620170157563.png)



其他常用命令看ppt

# 10、Nosql类型

## 键值(Key-Value)存储数据库:

​	这一类数据库主要会使用到一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署。但是如果DBA只对部分值进行查询或更新的时候，Key/value就显得效率低下了。[3]  举例如：Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB.

## 列存储数据库:

这部分数据库通常是用来应对分布式存储的海量数据。键仍然存在，但是它们的特点是指向了多个列。这些列是由列家族来安排的。如：Cassandra, HBase, Riak.

## 文档型数据库:

文档型数据库的灵感是来自于Lotus Notes办公软件的，而且它同第一种键值存储相类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可 以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。如：CouchDB, MongoDb. 国内也有文档型数据库SequoiaDB，已经开源。

## 图形(Graph)数据库:

图形结构的数据库同其他行列以及刚性结构的SQL数据库不同，它是使用灵活的图形模型，并且能够扩展到多个服务器上。NoSQL数据库没有标准的查询语言(SQL)，因此进行数据库查询需要制定数据模型。许多NoSQL数据库都有REST式的数据接口或者查询API。



# 11、redis全称

Remote Dictionary Server 



# 12、数据库存储架构（主从）优势

- 从服务器可以执行查询工作,降低主服务器访问压力
- 在从服务器执行备份,避免备份期间锁定主服务器的数据
- 当主服务器出现故障时,可以快速切换到从服务器,减少当机时间.
- MongoDB支持在多个机器中通过异步复制到底故障转移和实现冗余,多台机器中同一时刻只有一台是用于写操作,这为mongoDB提供了数据一致性的保障.担当Primary角色的机器能把读操作分发给slave机器.



